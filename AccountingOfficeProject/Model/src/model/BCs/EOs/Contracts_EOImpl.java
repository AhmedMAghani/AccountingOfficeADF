package model.BCs.EOs;

import java.math.BigDecimal;

import java.math.BigInteger;

import java.sql.Timestamp;

import java.text.SimpleDateFormat;

import java.util.Date;

import model.BCs.common.Money;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.domain.BFileDomain;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Mar 26 18:51:52 EET 2020
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class Contracts_EOImpl extends EntityImpl {
    private static final SimpleDateFormat sdf = new SimpleDateFormat("dd-MMM-yyyy");
    private final Key cashPrimaryKey = Cash_EOImpl.createPrimaryKey(new BigDecimal("1"));
    private Cash_EOImpl cashRecord;
    private BigDecimal cash;
    private Timestamp currentDate;

    /**
     * Validation method for ContractEndDate.
     */
    public boolean validateContractEndDate(Timestamp contractenddate) {
        if (contractenddate.compareTo(getContractPrintDate()) <= 0)
            return false;
        return true;
    }

    /**
     * Validation method for ContractPrintDate.
     */
    public boolean validateContractPrintDate(Timestamp contractprintdate) {
        if (contractprintdate.compareTo(getContractSignDate()) > 0)
            return false;
        return true;
    }

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        ContractId,
        ContractCompanyId,
        ContractCompanyRepName,
        ContractEmpId,
        ContractDecument,
        ContractNote,
        ContractValue,
        ContractSignDate,
        ContractPrintDate,
        ContractEndDate,
        ContractType,
        ContractIncome,
        ContractExpence,
        ContractDebit,
        CashID,
        Companies,
        Employees,
        OfficeExpences,
        OfficeIncome,
        Tasks,
        Cash;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int CONTRACTID = AttributesEnum.ContractId.index();
    public static final int CONTRACTCOMPANYID = AttributesEnum.ContractCompanyId.index();
    public static final int CONTRACTCOMPANYREPNAME = AttributesEnum.ContractCompanyRepName.index();
    public static final int CONTRACTEMPID = AttributesEnum.ContractEmpId.index();
    public static final int CONTRACTDECUMENT = AttributesEnum.ContractDecument.index();
    public static final int CONTRACTNOTE = AttributesEnum.ContractNote.index();
    public static final int CONTRACTVALUE = AttributesEnum.ContractValue.index();
    public static final int CONTRACTSIGNDATE = AttributesEnum.ContractSignDate.index();
    public static final int CONTRACTPRINTDATE = AttributesEnum.ContractPrintDate.index();
    public static final int CONTRACTENDDATE = AttributesEnum.ContractEndDate.index();
    public static final int CONTRACTTYPE = AttributesEnum.ContractType.index();
    public static final int CONTRACTINCOME = AttributesEnum.ContractIncome.index();
    public static final int CONTRACTEXPENCE = AttributesEnum.ContractExpence.index();
    public static final int CONTRACTDEBIT = AttributesEnum.ContractDebit.index();
    public static final int CASHID = AttributesEnum.CashID.index();
    public static final int COMPANIES = AttributesEnum.Companies.index();
    public static final int EMPLOYEES = AttributesEnum.Employees.index();
    public static final int OFFICEEXPENCES = AttributesEnum.OfficeExpences.index();
    public static final int OFFICEINCOME = AttributesEnum.OfficeIncome.index();
    public static final int TASKS = AttributesEnum.Tasks.index();
    public static final int CASH = AttributesEnum.Cash.index();

    /**
     * This is the default constructor (do not remove).
     */
    public Contracts_EOImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("model.BCs.EOs.Contracts_EO");
    }


    /**
     * Gets the attribute value for ContractId, using the alias name ContractId.
     * @return the value of ContractId
     */
    public BigDecimal getContractId() {
        return (BigDecimal) getAttributeInternal(CONTRACTID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ContractId.
     * @param value value to set the ContractId
     */
    public void setContractId(BigDecimal value) {
        setAttributeInternal(CONTRACTID, value);
    }

    /**
     * Gets the attribute value for ContractCompanyId, using the alias name ContractCompanyId.
     * @return the value of ContractCompanyId
     */
    public BigDecimal getContractCompanyId() {
        return (BigDecimal) getAttributeInternal(CONTRACTCOMPANYID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ContractCompanyId.
     * @param value value to set the ContractCompanyId
     */
    public void setContractCompanyId(BigDecimal value) {
        setAttributeInternal(CONTRACTCOMPANYID, value);
    }

    /**
     * Gets the attribute value for ContractCompanyRepName, using the alias name ContractCompanyRepName.
     * @return the value of ContractCompanyRepName
     */
    public String getContractCompanyRepName() {
        return (String) getAttributeInternal(CONTRACTCOMPANYREPNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for ContractCompanyRepName.
     * @param value value to set the ContractCompanyRepName
     */
    public void setContractCompanyRepName(String value) {
        setAttributeInternal(CONTRACTCOMPANYREPNAME, value);
    }

    /**
     * Gets the attribute value for ContractEmpId, using the alias name ContractEmpId.
     * @return the value of ContractEmpId
     */
    public BigDecimal getContractEmpId() {
        return (BigDecimal) getAttributeInternal(CONTRACTEMPID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ContractEmpId.
     * @param value value to set the ContractEmpId
     */
    public void setContractEmpId(BigDecimal value) {
        setAttributeInternal(CONTRACTEMPID, value);
    }

    /**
     * Gets the attribute value for ContractDecument, using the alias name ContractDecument.
     * @return the value of ContractDecument
     */
    public String getContractDecument() {
        return (String) getAttributeInternal(CONTRACTDECUMENT);
    }

    /**
     * Sets <code>value</code> as the attribute value for ContractDecument.
     * @param value value to set the ContractDecument
     */
    public void setContractDecument(String value) {
        setAttributeInternal(CONTRACTDECUMENT, value);
    }

    /**
     * Gets the attribute value for ContractNote, using the alias name ContractNote.
     * @return the value of ContractNote
     */
    public String getContractNote() {
        return (String) getAttributeInternal(CONTRACTNOTE);
    }

    /**
     * Sets <code>value</code> as the attribute value for ContractNote.
     * @param value value to set the ContractNote
     */
    public void setContractNote(String value) {
        setAttributeInternal(CONTRACTNOTE, value);
    }

    /**
     * Gets the attribute value for ContractValue, using the alias name ContractValue.
     * @return the value of ContractValue
     */
    public BigDecimal getContractValue() {
        return (BigDecimal) getAttributeInternal(CONTRACTVALUE);
    }

    /**
     * Sets <code>value</code> as the attribute value for ContractValue.
     * @param value value to set the ContractValue
     */
    public void setContractValue(BigDecimal value) {
        setAttributeInternal(CONTRACTVALUE, value);
    }

    /**
     * Gets the attribute value for ContractSignDate, using the alias name ContractSignDate.
     * @return the value of ContractSignDate
     */
    public Timestamp getContractSignDate() {
        return (Timestamp) getAttributeInternal(CONTRACTSIGNDATE);
    }


    /**
     * Gets the attribute value for ContractPrintDate, using the alias name ContractPrintDate.
     * @return the value of ContractPrintDate
     */
    public Timestamp getContractPrintDate() {
        return (Timestamp) getAttributeInternal(CONTRACTPRINTDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for ContractPrintDate.
     * @param value value to set the ContractPrintDate
     */
    public void setContractPrintDate(Timestamp value) {
        setAttributeInternal(CONTRACTPRINTDATE, value);
    }

    /**
     * Gets the attribute value for ContractEndDate, using the alias name ContractEndDate.
     * @return the value of ContractEndDate
     */
    public Timestamp getContractEndDate() {
        return (Timestamp) getAttributeInternal(CONTRACTENDDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for ContractEndDate.
     * @param value value to set the ContractEndDate
     */
    public void setContractEndDate(Timestamp value) {
        setAttributeInternal(CONTRACTENDDATE, value);
    }

    /**
     * Gets the attribute value for ContractType, using the alias name ContractType.
     * @return the value of ContractType
     */
    public BigDecimal getContractType() {
        return (BigDecimal) getAttributeInternal(CONTRACTTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for ContractType.
     * @param value value to set the ContractType
     */
    public void setContractType(BigDecimal value) {
        setAttributeInternal(CONTRACTTYPE, value);
    }

    /**
     * Gets the attribute value for ContractIncome, using the alias name ContractIncome.
     * @return the value of ContractIncome
     */
    public BigDecimal getContractIncome() {
        return (BigDecimal) getAttributeInternal(CONTRACTINCOME);
    }

    /**
     * Sets <code>value</code> as the attribute value for ContractIncome.
     * @param value value to set the ContractIncome
     */
    public void setContractIncome(BigDecimal value) {
        setAttributeInternal(CONTRACTINCOME, value);
    }

    /**
     * Gets the attribute value for ContractExpence, using the alias name ContractExpence.
     * @return the value of ContractExpence
     */
    public BigDecimal getContractExpence() {
        return (BigDecimal) getAttributeInternal(CONTRACTEXPENCE);
    }

    /**
     * Sets <code>value</code> as the attribute value for ContractExpence.
     * @param value value to set the ContractExpence
     */
    public void setContractExpence(BigDecimal value) {
        setAttributeInternal(CONTRACTEXPENCE, value);
    }

    /**
     * Gets the attribute value for ContractDebit, using the alias name ContractDebit.
     * @return the value of ContractDebit
     */
    public BigDecimal getContractDebit() {
        return (BigDecimal) getAttributeInternal(CONTRACTDEBIT);
    }

    /**
     * Sets <code>value</code> as the attribute value for ContractDebit.
     * @param value value to set the ContractDebit
     */
    public void setContractDebit(BigDecimal value) {
        setAttributeInternal(CONTRACTDEBIT, value);
    }

    /**
     * Gets the attribute value for CashID, using the alias name CashID.
     * @return the value of CashID
     */
    public BigDecimal getCashID() {
        return (BigDecimal) getAttributeInternal(CASHID);
    }

    /**
     * Sets <code>value</code> as the attribute value for CashID.
     * @param value value to set the CashID
     */
    public void setCashID(BigDecimal value) {
        setAttributeInternal(CASHID, value);
    }

    /**
     * @return the associated entity oracle.jbo.server.EntityImpl.
     */
    public EntityImpl getCompanies() {
        return (EntityImpl) getAttributeInternal(COMPANIES);
    }

    /**
     * Sets <code>value</code> as the associated entity oracle.jbo.server.EntityImpl.
     */
    public void setCompanies(EntityImpl value) {
        setAttributeInternal(COMPANIES, value);
    }

    /**
     * @return the associated entity oracle.jbo.server.EntityImpl.
     */
    public EntityImpl getEmployees() {
        return (EntityImpl) getAttributeInternal(EMPLOYEES);
    }

    /**
     * Sets <code>value</code> as the associated entity oracle.jbo.server.EntityImpl.
     */
    public void setEmployees(EntityImpl value) {
        setAttributeInternal(EMPLOYEES, value);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getOfficeExpences() {
        return (RowIterator) getAttributeInternal(OFFICEEXPENCES);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getOfficeIncome() {
        return (RowIterator) getAttributeInternal(OFFICEINCOME);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getTasks() {
        return (RowIterator) getAttributeInternal(TASKS);
    }


    /**
     * @return the associated entity oracle.jbo.server.EntityImpl.
     */
    public Cash_EOImpl getCash() {
        return (Cash_EOImpl) getAttributeInternal(CASH);
    }

    /**
     * Sets <code>value</code> as the associated entity oracle.jbo.server.EntityImpl.
     */
    public void setCash(Cash_EOImpl value) {
        setAttributeInternal(CASH, value);
    }


    /**
     * @param contractId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(BigDecimal contractId) {
        return new Key(new Object[] { contractId });
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        super.doDML(operation, e);
        if (operation == DML_INSERT)
            updateCashTable();
        if (operation == DML_UPDATE)
            updateCashTable();
    }

    private void updateCashTable() {
        cashRecord =
            (Cash_EOImpl) Cash_EOImpl.getDefinitionObject().findByPrimaryKey(getDBTransaction(), cashPrimaryKey);
        if (cashRecord == null) {
            EntityDefImpl cashDef = Cash_EOImpl.getDefinitionObject();
            cashRecord = (Cash_EOImpl) cashDef.createInstance2(getDBTransaction(), null);
            cashRecord.setCashId(new BigDecimal("1"));
            cashRecord.setCurrentCash(new BigDecimal("10000"));
            createCashRecord();
        } else
            createCashRecord();
    }

    private void createCashRecord() {
        currentDate = new Timestamp(System.currentTimeMillis());
        cashRecord.setAttribute("LastTransactionDate", currentDate);
        setNewUpdatedCash();
        setNewOfficeCash();
        setNewCompanyCash();
    }
    private void setNewUpdatedCash() {
        if (getContractIncome() != null && getContractDebit() != null) {
            if (cashRecord.getUpdatedCash() == null)
                cash = new BigDecimal("0");
            else
                cash = cashRecord.getUpdatedCash();
//            if (this.isAttributeChanged("ContractIncome"))
                cashRecord.setUpdatedCash((cash.add(getBigDecimalValue(getContractIncome().subtract(getBigDecimalValue((BigDecimal)getPostedAttribute(CONTRACTINCOME)))))).add(getBigDecimalValue(getContractDebit().subtract(getBigDecimalValue((BigDecimal)getPostedAttribute(CONTRACTDEBIT))))));
//                cashRecord.setUpdatedCash((cash.add(getBigDecimalValue(getContractIncome().subtract(getBigDecimalValue((BigDecimal)getPostedAttribute(CONTRACTINCOME)))))));
//            else
//                cashRecord.setUpdatedCash((cash.add(getBigDecimalValue(getContractDebit().subtract(getBigDecimalValue((BigDecimal)getPostedAttribute(CONTRACTDEBIT)))))));
        }
    }

    private void setNewOfficeCash() {
        if (this.isAttributeChanged("ContractIncome")) {
            cash = cashRecord.getOfficeCash();
            cashRecord.setOfficeCash(getBigDecimalValue(cash).add(getBigDecimalValue(getContractIncome().subtract(getBigDecimalValue((BigDecimal)getPostedAttribute(CONTRACTINCOME))))));
        }
    }

    private void setNewCompanyCash() {
        if (this.isAttributeChanged("ContractDebit")) {
        cash = cashRecord.getCompanyCash();
        cashRecord.setCompanyCash(getBigDecimalValue(cash).add(getBigDecimalValue(getContractDebit().subtract(getBigDecimalValue((BigDecimal)getPostedAttribute(CONTRACTDEBIT))))));
        }
    }

    private BigDecimal getBigDecimalValue(BigDecimal val) {
        if (val == null)
            return new BigDecimal("0");
        else
            return val;
    }
}

