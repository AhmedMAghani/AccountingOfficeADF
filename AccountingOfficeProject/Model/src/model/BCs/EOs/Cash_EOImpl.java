package model.BCs.EOs;

import java.math.BigDecimal;

import java.sql.Timestamp;

import model.BCs.common.Money;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Mar 28 03:57:56 EET 2020
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class Cash_EOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        StartDate,
        LastTransactionDate,
        CurrentCash,
        UpdatedCash,
        CompanyCash,
        OfficeCash,
        CashId,
        Contracts;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int STARTDATE = AttributesEnum.StartDate.index();
    public static final int LASTTRANSACTIONDATE = AttributesEnum.LastTransactionDate.index();
    public static final int CURRENTCASH = AttributesEnum.CurrentCash.index();
    public static final int UPDATEDCASH = AttributesEnum.UpdatedCash.index();
    public static final int COMPANYCASH = AttributesEnum.CompanyCash.index();
    public static final int OFFICECASH = AttributesEnum.OfficeCash.index();
    public static final int CASHID = AttributesEnum.CashId.index();
    public static final int CONTRACTS = AttributesEnum.Contracts.index();

    /**
     * This is the default constructor (do not remove).
     */
    public Cash_EOImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("model.BCs.EOs.Cash_EO");
    }


    /**
     * Gets the attribute value for StartDate, using the alias name StartDate.
     * @return the value of StartDate
     */
    public Timestamp getStartDate() {
        return (Timestamp) getAttributeInternal(STARTDATE);
    }

    /**
     * Gets the attribute value for LastTransactionDate, using the alias name LastTransactionDate.
     * @return the value of LastTransactionDate
     */
    public Timestamp getLastTransactionDate() {
        return (Timestamp) getAttributeInternal(LASTTRANSACTIONDATE);
    }

    /**
     * Gets the attribute value for CurrentCash, using the alias name CurrentCash.
     * @return the value of CurrentCash
     */
    public BigDecimal getCurrentCash() {
        return (BigDecimal) getAttributeInternal(CURRENTCASH);
    }

    /**
     * Sets <code>value</code> as the attribute value for CurrentCash.
     * @param value value to set the CurrentCash
     */
    public void setCurrentCash(BigDecimal value) {
        setAttributeInternal(CURRENTCASH, value);
    }

    /**
     * Gets the attribute value for UpdatedCash, using the alias name UpdatedCash.
     * @return the value of UpdatedCash
     */
    public BigDecimal getUpdatedCash() {
        return (BigDecimal) getAttributeInternal(UPDATEDCASH);
    }

    /**
     * Sets <code>value</code> as the attribute value for UpdatedCash.
     * @param value value to set the UpdatedCash
     */
    public void setUpdatedCash(BigDecimal value) {
        setAttributeInternal(UPDATEDCASH, value);
    }

    /**
     * Gets the attribute value for CompanyCash, using the alias name CompanyCash.
     * @return the value of CompanyCash
     */
    public BigDecimal getCompanyCash() {
        return (BigDecimal) getAttributeInternal(COMPANYCASH);
    }

    /**
     * Sets <code>value</code> as the attribute value for CompanyCash.
     * @param value value to set the CompanyCash
     */
    public void setCompanyCash(BigDecimal value) {
        setAttributeInternal(COMPANYCASH, value);
    }

    /**
     * Gets the attribute value for OfficeCash, using the alias name OfficeCash.
     * @return the value of OfficeCash
     */
    public BigDecimal getOfficeCash() {
        return (BigDecimal) getAttributeInternal(OFFICECASH);
    }

    /**
     * Sets <code>value</code> as the attribute value for OfficeCash.
     * @param value value to set the OfficeCash
     */
    public void setOfficeCash(BigDecimal value) {
        setAttributeInternal(OFFICECASH, value);
    }

    /**
     * Gets the attribute value for CashId, using the alias name CashId.
     * @return the value of CashId
     */
    public BigDecimal getCashId() {
        return (BigDecimal) getAttributeInternal(CASHID);
    }

    /**
     * Sets <code>value</code> as the attribute value for CashId.
     * @param value value to set the CashId
     */
    public void setCashId(BigDecimal value) {
        setAttributeInternal(CASHID, value);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getContracts() {
        return (RowIterator) getAttributeInternal(CONTRACTS);
    }


    /**
     * @param cashId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(BigDecimal cashId) {
        return new Key(new Object[] { cashId });
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        super.doDML(operation, e);
    }
}

